name: Auto Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".github/**"

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build

      - name: Get current version
        id: current_version
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Extract version number
          VERSION_NUMBER=$(echo $LATEST_TAG | sed 's/v//')
          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT

          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_number=$MAJOR.$MINOR.$NEW_PATCH" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag
          COMMITS=$(git log --pretty=format:"- %s" ${{ steps.current_version.outputs.latest_tag }}..HEAD)

          # Create release notes
          RELEASE_NOTES="## Frysen ${{ steps.bump_version.outputs.new_version }}

          ### Changes since ${{ steps.current_version.outputs.latest_tag }}:

          $COMMITS

          ### Build Info:
          - Built on: $(date -u +"%Y-%m-%d %H:%M UTC")
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}"

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.bump_version.outputs.new_version }} -m "Release ${{ steps.bump_version.outputs.new_version }}"
          git push origin ${{ steps.bump_version.outputs.new_version }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: Frysen ${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Build Android APK
        run: |
          # Install Android SDK
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk

          # Set up Android environment
          export ANDROID_HOME=$HOME/android-sdk
          export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

          # Sync Capacitor
          npx cap sync

          # Build APK (this would require more setup, but we'll create a placeholder)
          echo "Android build would happen here in a full setup"

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android/app/build/outputs/apk/debug/app-debug.apk
          asset_name: frysen-${{ steps.bump_version.outputs.new_version_number }}-debug.apk
          asset_content_type: application/vnd.android.package-archive
        continue-on-error: true # Continue even if APK build fails

      - name: Update package.json version
        run: |
          # Update package.json version
          npm version ${{ steps.bump_version.outputs.new_version_number }} --no-git-tag-version

          # Commit and push the version update
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version_number }}"
          git push origin master
