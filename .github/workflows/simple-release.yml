name: Simple Auto Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".github/**"
      - "version.txt"

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build

      - name: Read current version
        id: current_version
        run: |
          CURRENT_VERSION=$(cat version.txt | tr -d ' ')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          # Get version parts from previous step
          MAJOR="${{ steps.current_version.outputs.major }}"
          MINOR="${{ steps.current_version.outputs.minor }}"
          PATCH="${{ steps.current_version.outputs.patch }}"

          echo "Debug: MAJOR='$MAJOR', MINOR='$MINOR', PATCH='$PATCH'"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update version file
          echo "$NEW_VERSION" > version.txt

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag (or all commits if no tags)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" $LATEST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s" --reverse)
          fi

          # Create release notes
          RELEASE_NOTES="## Frysen v${{ steps.bump_version.outputs.new_version }}

          ### Changes in this release:

          $COMMITS

          ### Build Info:
          - Built on: $(date -u +"%Y-%m-%d %H:%M UTC")
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}"

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push origin master
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.bump_version.outputs.new_version }}"
          release_name: "Frysen v${{ steps.bump_version.outputs.new_version }}"
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: false
